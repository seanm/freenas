/*

This is the default Jenkins Pipeline file used to create our
freenas PR images.

*/

pipeline {
  agent {
    label 'FreeNAS-FreeNAS-PR'
  }

  environment {
    GH_ORG = 'freenas'
    GH_REPO = 'freenas'
    BUILDBRANCH = 'freenas/12-stable'
    SRCROOT = '/usr/freenas-src'
    POUDRIERE_BASE = 'fn-master-base'
    POUDRIERE_PORTS = 'fn-master-ports'

    // Set the MANIFEST we want to use for this build
    //TRUEOS_MANIFEST='${SRCROOT}/release/manifests/freenas-master.json'
  }

  stages {

    stage('Checkout') {
      steps {
        checkout scm

	// Cleanup artifacts
        sh 'rm -rf ${WORKSPACE}/artifacts'
        sh 'mkdir -p ${WORKSPACE}/artifacts/repo'

	// Prep the fake SRCROOT
        sh 'mkdir -p ${SRCROOT} || true'
        sh 'umount -f ${SRCROOT} || true'
        sh 'rm -rf ${SRCROOT}'
        sh 'mkdir -p ${SRCROOT}'
        sh 'rm /usr/local/poudriere/data/logs/bulk/${POUDRIERE_BASE}-${POUDRIERE_PORTS}/latest/logs/* || true'
      }
    }

    stage('Prep') {
      steps {
        echo '*** Moving local sources ***'

        // Setup our local sources for building
        sh 'rm -rf /usr/local_source || true'
        sh 'mkdir -p /usr/local_source'
        sh '${WORKSPACE}/jenkins/repo-depends.sh'
        sh 'cp -r ${WORKSPACE} /usr/local_source/freenas-files'
        sh 'cp -r ${WORKSPACE} /usr/local_source/freenas-ui'
        sh 'cp -r ${WORKSPACE} /usr/local_source/middlewared'

	// Checkout the trueos/trueos repo for building
	sh 'git clone --depth=1 -b ${BUILDBRANCH} https://github.com/trueos/trueos ${SRCROOT}'

	// Roll back the ZFS dataset
	sh '${SRCROOT}/Jenkins/scripts/snapobj.sh rollback /usr/obj${SRCROOT}'

        sh 'rm /usr/obj${SRCROOT}/amd64.amd64/release/*.iso || true'
        sh 'rm /usr/obj${SRCROOT}/amd64.amd64/release/*.img || true'
      }
    }

    stage('Packages') {
      post {
        always {
          sh 'cp -r /usr/local/poudriere/data/logs/bulk/${POUDRIERE_BASE}-${POUDRIERE_PORTS}/latest/logs ${WORKSPACE}/artifacts/poudriere-logs'
        }
        failure {
          sh 'tail -n 200 ${WORKSPACE}/artifacts/packages.log'
        }
      }
      environment {
        // Get our credentials from Jenkins
        PKGSIGNKEY = credentials('a50f9ddd-1460-4951-a304-ddbf6f2f7990')
      }
      steps {
        sh 'cd ${SRCROOT} && make -j 16 ports >${WORKSPACE}/artifacts/packages.log 2>&1'
      }
    }
    stage('Release') {
      post {
        failure {
          sh 'tail -n 200 ${WORKSPACE}/artifacts/release.log'
        }
      }
      steps {
        sh 'cd ${SRCROOT}/release && make clean'
        sh 'cd ${SRCROOT}/release && make iso >${WORKSPACE}/artifacts/release.log 2>&1'
        sh 'cp /usr/obj${SRCROOT}/amd64.amd64/release/*.iso ${WORKSPACE}/artifacts'
        sh 'cp /usr/obj${SRCROOT}/amd64.amd64/release/*.img ${WORKSPACE}/artifacts'
      }
    }
  }
  post {
    always {
      archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
      script {
        cleanWs notFailBuild: true
      }
    }
  }
}
